Scope; and; Closure:
Scope是指, 在當前的execution; context之中, 變數的可訪問性(accessibility);為何?
我們在function A; 所宣告的變數, 在function; B; 內不可以使用(訪問);嗎?
又或者,假定程式碼是;:
let x = 10;
function hello() {
    function hello2 {
        return x + 10;
    }
}

hello2(); 可以訪問到的全域變數(global variable);的x = 10;嗎?
了解Scope 可以知道, 每個變數在哪些區域範圍是有意義的,
或者變數在哪些區域是可訪問或可使用的.

JS的變數有以下幾種Scope;:
-Global Scope: The; default scope; for all code running in the script.
-Module Scope: The; scope; for code running in module mode.
-Function Scope: The; scope; is; created; with a function.
此外,用let或是const去宣告的變數屬於下面這個額外的scope;:
-Block; Scope: The; scope; created; with a pair; of; curly; braces(a block);



Closure:
在function execution context之中, 如果發現不再 function scope內部的變數,
JS將會轉到其他地方查找.
Closure (閉包) 就是指這種將函數與其周圍的狀態或語詞環境結合再一起的組合.
在JS中, 每次的function execution context 都會在 creation phase 創建 closure.

Closure的規則是:
1.從Argument Object 以及 local variable 去尋找.
2.若1找不到, 則從記憶體被分配給函數的位置開始尋找.
3.若在目前的 execution context 找不到, 就繼續往外層,往全域一層一層的去找.